// <auto-generated />
using System;
using EcommerceBasicoAWS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceBasicoAWS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251014103913_itemcarritofix")]
    partial class itemcarritofix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Property<Guid>("IdCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCarrito");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Carritos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Categoria", b =>
                {
                    b.Property<Guid>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            IdCategoria = new Guid("0eb1115e-75ee-44ea-b5de-15bbe78da54a"),
                            Nombre = "Ropa"
                        },
                        new
                        {
                            IdCategoria = new Guid("1a0781b7-629f-462e-8487-c410b1391f5a"),
                            Nombre = "Calzado"
                        },
                        new
                        {
                            IdCategoria = new Guid("1f4c2afd-63ad-479b-affd-f4a9e4ca6dca"),
                            Nombre = "Accesorios"
                        },
                        new
                        {
                            IdCategoria = new Guid("53fb44b3-7dfa-4c52-9305-6274c181d861"),
                            Nombre = "Hogar"
                        },
                        new
                        {
                            IdCategoria = new Guid("554cf31c-afce-4a38-87d9-309bb8b32873"),
                            Nombre = "Libros"
                        },
                        new
                        {
                            IdCategoria = new Guid("7432c6e6-5071-469d-950f-aaa1dd5144f4"),
                            Nombre = "Tecnología"
                        },
                        new
                        {
                            IdCategoria = new Guid("8ddf324f-e2e6-45b1-91e3-e9a7fbb6f868"),
                            Nombre = "Electrónica"
                        },
                        new
                        {
                            IdCategoria = new Guid("1f3f91c0-2666-4e5a-81f0-e6969f1f2707"),
                            Nombre = "Deportes"
                        },
                        new
                        {
                            IdCategoria = new Guid("0d45e702-9506-4edd-80ad-3cc2fc1f3854"),
                            Nombre = "Belleza"
                        },
                        new
                        {
                            IdCategoria = new Guid("0d5b18c3-d126-4850-b5fb-4b1e93cb2dd5"),
                            Nombre = "Joyería"
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.Property<Guid>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid>("IdPedido")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProducto");

                    b.ToTable("DetallesPedidos");

                    b.HasData(
                        new
                        {
                            IdDetalle = new Guid("28d268f5-5d18-4aa3-a611-b525e5138c09"),
                            Cantidad = 2,
                            IdPedido = new Guid("0aca61f9-87f7-4101-9385-b94fd22c8504"),
                            IdProducto = new Guid("fd5e3497-7613-4795-b6c2-ac126cc423c1"),
                            PrecioUnitario = 19.99m,
                            Subtotal = 39.98m
                        },
                        new
                        {
                            IdDetalle = new Guid("755d9d73-df0e-4d0a-ad63-0374f75dac03"),
                            Cantidad = 1,
                            IdPedido = new Guid("0aca61f9-87f7-4101-9385-b94fd22c8504"),
                            IdProducto = new Guid("a1c8c1c4-b461-41da-8162-5cca867f7f6c"),
                            PrecioUnitario = 12.50m,
                            Subtotal = 12.50m
                        },
                        new
                        {
                            IdDetalle = new Guid("198299b6-6ac7-4e5b-859f-40ed6480d51e"),
                            Cantidad = 1,
                            IdPedido = new Guid("54169c66-583f-4a82-b2ac-6d36c5923a10"),
                            IdProducto = new Guid("824776e3-0cc8-4d51-8e15-22c0cc608e4a"),
                            PrecioUnitario = 49.99m,
                            Subtotal = 49.99m
                        },
                        new
                        {
                            IdDetalle = new Guid("87bdf36e-55af-4312-b47b-025f6d646134"),
                            Cantidad = 1,
                            IdPedido = new Guid("54169c66-583f-4a82-b2ac-6d36c5923a10"),
                            IdProducto = new Guid("5b83a272-091a-49a8-9410-fe0df1050c7e"),
                            PrecioUnitario = 69.99m,
                            Subtotal = 69.99m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.Property<Guid>("IdDireccion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Domicilio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("principal")
                        .HasColumnType("bit");

                    b.HasKey("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Direcciones");

                    b.HasData(
                        new
                        {
                            IdDireccion = new Guid("92133601-31ab-4f47-86f9-483e11b457ca"),
                            Ciudad = "Madrid",
                            CodigoPostal = 28080,
                            Domicilio = "Avenida Siempreviva 742",
                            IdUsuario = "c99cca50-f8d9-411b-ae3d-4a72729c073f",
                            Pais = "España",
                            Provincia = "Madrid",
                            principal = true
                        },
                        new
                        {
                            IdDireccion = new Guid("1d1132db-e8a1-4e6d-9008-6ca9e4ebf766"),
                            Ciudad = "Barcelona",
                            CodigoPostal = 8001,
                            Domicilio = "Calle de la Piruleta 15",
                            IdUsuario = "c99cca50-f8d9-411b-ae3d-4a72729c073f",
                            Pais = "España",
                            Provincia = "Barcelona",
                            principal = false
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.Property<Guid>("IdItemCarrito")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<Guid?>("CarritoIdCarrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdCarrito")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MainImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdItemCarrito");

                    b.HasIndex("CarritoIdCarrito");

                    b.HasIndex("IdProducto");

                    b.ToTable("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.Property<int>("IdMultimedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMultimedia"));

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdMultimedia");

                    b.HasIndex("IdProducto");

                    b.ToTable("MultimediaProductos");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Property<Guid>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdDireccion")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdUsuario")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Numero")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdDireccion");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            IdPedido = new Guid("0aca61f9-87f7-4101-9385-b94fd22c8504"),
                            Estado = "Pendiente",
                            FechaCreacion = new DateTime(2025, 10, 13, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(5435),
                            IdDireccion = new Guid("92133601-31ab-4f47-86f9-483e11b457ca"),
                            IdUsuario = "c99cca50-f8d9-411b-ae3d-4a72729c073f",
                            Numero = 1,
                            Total = 45.99m
                        },
                        new
                        {
                            IdPedido = new Guid("54169c66-583f-4a82-b2ac-6d36c5923a10"),
                            Estado = "Enviado",
                            FechaCreacion = new DateTime(2025, 10, 9, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(5459),
                            IdDireccion = new Guid("92133601-31ab-4f47-86f9-483e11b457ca"),
                            IdUsuario = "c99cca50-f8d9-411b-ae3d-4a72729c073f",
                            Numero = 2,
                            Total = 89.50m
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Producto", b =>
                {
                    b.Property<Guid>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaActualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            IdProducto = new Guid("fd5e3497-7613-4795-b6c2-ac126cc423c1"),
                            Descripcion = "Camiseta de manga corta, 100% algodón suave.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2675),
                            FechaCreacion = new DateTime(2025, 9, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2615),
                            Nombre = "Camiseta Básica Algodón",
                            Precio = 19.99m,
                            Stock = 100
                        },
                        new
                        {
                            IdProducto = new Guid("824776e3-0cc8-4d51-8e15-22c0cc608e4a"),
                            Descripcion = "Pantalón vaquero clásico de corte recto.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2684),
                            FechaCreacion = new DateTime(2025, 8, 15, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2682),
                            Nombre = "Pantalón Vaquero Recto",
                            Precio = 49.99m,
                            Stock = 50
                        },
                        new
                        {
                            IdProducto = new Guid("a5ac44e6-d2ed-4bad-af28-cf9b5a4c34fe"),
                            Descripcion = "Zapatillas cómodas y con estilo para el día a día.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2742),
                            FechaCreacion = new DateTime(2025, 8, 30, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2688),
                            Nombre = "Zapatillas Deportivas Urbanas",
                            Precio = 79.99m,
                            Stock = 75
                        },
                        new
                        {
                            IdProducto = new Guid("b94dec15-7b74-4c65-9004-1434a3137841"),
                            Descripcion = "Bolso de cuero genuino con múltiples compartimentos.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2760),
                            FechaCreacion = new DateTime(2025, 7, 16, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2758),
                            Nombre = "Bolso de Cuero Grande",
                            Precio = 129.99m,
                            Stock = 20
                        },
                        new
                        {
                            IdProducto = new Guid("a253f3df-8fd8-45c0-b265-32b5f0986a81"),
                            Descripcion = "Gafas de sol con lentes polarizadas para una visión clara.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2776),
                            FechaCreacion = new DateTime(2025, 9, 24, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2774),
                            Nombre = "Gafas de Sol Polarizadas",
                            Precio = 59.99m,
                            Stock = 60
                        },
                        new
                        {
                            IdProducto = new Guid("a1c8c1c4-b461-41da-8162-5cca867f7f6c"),
                            Descripcion = "Una emocionante novela de fantasía y aventuras.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2808),
                            FechaCreacion = new DateTime(2025, 9, 29, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2806),
                            Nombre = "Libro 'Aventuras Épicas'",
                            Precio = 12.50m,
                            Stock = 150
                        },
                        new
                        {
                            IdProducto = new Guid("e62a79a3-9500-41ad-80c9-d2bffb25e08d"),
                            Descripcion = "Taza de cerámica de alta calidad con diseño único.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2818),
                            FechaCreacion = new DateTime(2025, 10, 7, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2816),
                            Nombre = "Taza de Cerámica Decorada",
                            Precio = 8.99m,
                            Stock = 200
                        },
                        new
                        {
                            IdProducto = new Guid("1db3a7a5-9204-4964-8254-f4869406c51d"),
                            Descripcion = "Funda resistente para proteger tu teléfono de golpes y arañazos.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2846),
                            FechaCreacion = new DateTime(2025, 9, 9, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2821),
                            Nombre = "Funda Protectora para Smartphone",
                            Precio = 24.99m,
                            Stock = 120
                        },
                        new
                        {
                            IdProducto = new Guid("0a0200e4-c1d9-4e7c-a268-9cf3a1b1797a"),
                            Descripcion = "Reloj elegante con correa de cuero y movimiento de cuarzo.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2851),
                            FechaCreacion = new DateTime(2025, 8, 25, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2850),
                            Nombre = "Reloj de Pulsera Clásico",
                            Precio = 99.99m,
                            Stock = 30
                        },
                        new
                        {
                            IdProducto = new Guid("5b83a272-091a-49a8-9410-fe0df1050c7e"),
                            Descripcion = "Auriculares con conexión Bluetooth y sonido de alta fidelidad.",
                            FechaActualizacion = new DateTime(2025, 10, 14, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2957),
                            FechaCreacion = new DateTime(2025, 9, 19, 12, 39, 12, 231, DateTimeKind.Local).AddTicks(2955),
                            Nombre = "Auriculares Inalámbricos Bluetooth",
                            Precio = 69.99m,
                            Stock = 80
                        });
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.Property<Guid>("IdProductoCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCategoria")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdProducto")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IdProductoCategoria");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdProducto");

                    b.ToTable("ProductosCategorias");

                    b.HasData(
                        new
                        {
                            IdProductoCategoria = new Guid("496bcc87-5fa1-4537-bbb4-f2394100c3e9"),
                            IdCategoria = new Guid("0eb1115e-75ee-44ea-b5de-15bbe78da54a"),
                            IdProducto = new Guid("fd5e3497-7613-4795-b6c2-ac126cc423c1")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("67310719-7d2f-46b4-abde-a6b0e870603f"),
                            IdCategoria = new Guid("0eb1115e-75ee-44ea-b5de-15bbe78da54a"),
                            IdProducto = new Guid("824776e3-0cc8-4d51-8e15-22c0cc608e4a")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("e8f3d6b1-37b7-4eff-bda7-3f1f47073759"),
                            IdCategoria = new Guid("1a0781b7-629f-462e-8487-c410b1391f5a"),
                            IdProducto = new Guid("a5ac44e6-d2ed-4bad-af28-cf9b5a4c34fe")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("88f7ecd2-1ea8-496a-92dd-8ca82bd3c8d5"),
                            IdCategoria = new Guid("1f3f91c0-2666-4e5a-81f0-e6969f1f2707"),
                            IdProducto = new Guid("a5ac44e6-d2ed-4bad-af28-cf9b5a4c34fe")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("ce060921-62fc-48a7-8ed8-c314f44879be"),
                            IdCategoria = new Guid("1f4c2afd-63ad-479b-affd-f4a9e4ca6dca"),
                            IdProducto = new Guid("b94dec15-7b74-4c65-9004-1434a3137841")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("7b5eee2b-bb62-4328-a04b-0781edfc0061"),
                            IdCategoria = new Guid("0d45e702-9506-4edd-80ad-3cc2fc1f3854"),
                            IdProducto = new Guid("b94dec15-7b74-4c65-9004-1434a3137841")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("f0a75729-55ca-49bd-b860-12e7ad66ce18"),
                            IdCategoria = new Guid("1f4c2afd-63ad-479b-affd-f4a9e4ca6dca"),
                            IdProducto = new Guid("a253f3df-8fd8-45c0-b265-32b5f0986a81")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("cb7c8fa5-d4e9-4c72-b066-e14be7751bf8"),
                            IdCategoria = new Guid("554cf31c-afce-4a38-87d9-309bb8b32873"),
                            IdProducto = new Guid("a1c8c1c4-b461-41da-8162-5cca867f7f6c")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("3fe0505e-a6aa-4337-b9b3-eb37fd91d0d8"),
                            IdCategoria = new Guid("53fb44b3-7dfa-4c52-9305-6274c181d861"),
                            IdProducto = new Guid("e62a79a3-9500-41ad-80c9-d2bffb25e08d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("45c63ac5-30fb-4453-818f-c7bd89d90284"),
                            IdCategoria = new Guid("7432c6e6-5071-469d-950f-aaa1dd5144f4"),
                            IdProducto = new Guid("1db3a7a5-9204-4964-8254-f4869406c51d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("7ea09b2a-81b3-4b01-9dea-1bcbd03686d7"),
                            IdCategoria = new Guid("8ddf324f-e2e6-45b1-91e3-e9a7fbb6f868"),
                            IdProducto = new Guid("1db3a7a5-9204-4964-8254-f4869406c51d")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("f8eb6619-2a7b-4fa3-9865-af094616b60b"),
                            IdCategoria = new Guid("1f4c2afd-63ad-479b-affd-f4a9e4ca6dca"),
                            IdProducto = new Guid("0a0200e4-c1d9-4e7c-a268-9cf3a1b1797a")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("6c554b09-0bfe-4bce-8988-d8bb20cdc550"),
                            IdCategoria = new Guid("0d5b18c3-d126-4850-b5fb-4b1e93cb2dd5"),
                            IdProducto = new Guid("0a0200e4-c1d9-4e7c-a268-9cf3a1b1797a")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("10094cfd-54e3-4b12-9726-160de42865a9"),
                            IdCategoria = new Guid("7432c6e6-5071-469d-950f-aaa1dd5144f4"),
                            IdProducto = new Guid("5b83a272-091a-49a8-9410-fe0df1050c7e")
                        },
                        new
                        {
                            IdProductoCategoria = new Guid("72fe28b7-36d2-4de8-9243-57bde3d9f6d6"),
                            IdCategoria = new Guid("8ddf324f-e2e6-45b1-91e3-e9a7fbb6f868"),
                            IdProducto = new Guid("5b83a272-091a-49a8-9410-fe0df1050c7e")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "256bce89-bbcf-47e4-9477-7a66547d8ba7",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4e731712-6fde-497b-9e70-aabecaccd030",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "95097de8-75af-40b5-b234-a8c9aeaf7fe0",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "889c0e2b-ae82-4bcb-9fa3-25d3168f4c94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98f6ea28-9118-4d5c-938f-bf70e01eb152",
                            Email = "admin@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@NEXUSSHOP.COM",
                            NormalizedUserName = "ADMIN@NEXUSSHOP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBTXZJWwZ1YhUNADxraViJrw3I5ZJ4NXay2JxrweLVny6FwMCVzSMARZPH1hpYns1g==",
                            PhoneNumber = "653124875",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8869316-6938-458c-9f83-27b461824438",
                            TwoFactorEnabled = false,
                            UserName = "admin@nexusshop.com"
                        },
                        new
                        {
                            Id = "fd2c6f23-c997-4bd9-8b4c-5492a5501323",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e05dd70-2f5b-4d9d-8142-e7baae079fcc",
                            Email = "lucia.sanchiz@nexusshop.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCIA.SANCHIZ@NEXUSSHOP.COM",
                            NormalizedUserName = "LUCIA.SANCHIZ@NEXUSSHOP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKSeWarRyxyMnBHWsHN6RZFIcS7QAOa/O780X66x9peTBd2269fOokoL2pyP34RXEA==",
                            PhoneNumber = "685214739",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05b1b886-f685-4692-9872-de17453eeab2",
                            TwoFactorEnabled = false,
                            UserName = "lucia.sanchiz@nexusshop.com"
                        },
                        new
                        {
                            Id = "c99cca50-f8d9-411b-ae3d-4a72729c073f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "015a9c89-4073-4fb8-aff1-e6d72b854e79",
                            Email = "paco.montoro@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PACO.MONTORO@GMAIL.COM",
                            NormalizedUserName = "PACO.MONTORO@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMy3OoklSXj8AwmO1TgWiP0ZiewcxMLwquv42Xiho7DnVCEWQfuOP+qw/ovzlqguYQ==",
                            PhoneNumber = "632514785",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ba924e4-3334-4f6e-80af-735b74eea4ad",
                            TwoFactorEnabled = false,
                            UserName = "paco.montoro@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "889c0e2b-ae82-4bcb-9fa3-25d3168f4c94",
                            RoleId = "256bce89-bbcf-47e4-9477-7a66547d8ba7"
                        },
                        new
                        {
                            UserId = "fd2c6f23-c997-4bd9-8b4c-5492a5501323",
                            RoleId = "4e731712-6fde-497b-9e70-aabecaccd030"
                        },
                        new
                        {
                            UserId = "c99cca50-f8d9-411b-ae3d-4a72729c073f",
                            RoleId = "95097de8-75af-40b5-b234-a8c9aeaf7fe0"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.DetallesPedidos", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Pedido", "Pedido")
                        .WithMany("DetallesPedidos")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Direccion", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ItemCarrito", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Carrito", null)
                        .WithMany("ItemsCarrito")
                        .HasForeignKey("CarritoIdCarrito");

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.MultimediaProducto", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Direccion", "Direccion")
                        .WithMany()
                        .HasForeignKey("IdDireccion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario");

                    b.Navigation("Direccion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.ProductoCategoria", b =>
                {
                    b.HasOne("EcommerceBasicoAWS.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceBasicoAWS.Models.Producto", "Producto")
                        .WithMany()
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Carrito", b =>
                {
                    b.Navigation("ItemsCarrito");
                });

            modelBuilder.Entity("EcommerceBasicoAWS.Models.Pedido", b =>
                {
                    b.Navigation("DetallesPedidos");
                });
#pragma warning restore 612, 618
        }
    }
}
